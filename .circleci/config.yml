# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:2.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: CircleCI functionality tests
          command: |
              echo "CIRCLE_PROJECT_REPONAME = $CIRCLE_PROJECT_REPONAME"
              echo "CIRCLE_PROJECT_USERNAME = $CIRCLE_PROJECT_USERNAME"
              echo "CIRCLE_PULL_REQUESTS = $CIRCLE_PULL_REQUESTS"
              echo "CIRCLE_BRANCH = $CIRCLE_BRANCH"
              echo "CIRCLE_PR_REPONAME = $CIRCLE_PR_REPONAME"
              echo "CIRCLE_SHA1 = $CIRCLE_SHA1"


      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "setup.py" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            virtualenv venv
            . venv/bin/activate
            python setup.py install

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python setup.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - store_artifacts:
          path: coverage.xml
          destination: coverage

      - store_test_results:
          path: test-reports
